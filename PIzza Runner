DROP TABLE IF EXISTS tmp_customer_orders;
CREATE TEMP TABLE tmp_customer_orders AS
SELECT
  order_id,
  customer_id,
  pizza_id,
  CASE WHEN exclusions = 'null' or exclusions = '' THEN NULL ELSE exclusions END,
  CASE WHEN extras = 'null' or extras = '' THEN NULL ELSE extras END,
  (order_time + INTERVAL '1 year') AS order_time
FROM pizza_runner.customer_orders;

DROP TABLE IF EXISTS tmp_runner_orders;
CREATE TEMP TABLE tmp_runner_orders AS
SELECT
  order_id,
  runner_id,
  CAST(CASE WHEN pickup_time = 'null' THEN NULL ELSE pickup_time END AS TIMESTAMP) + INTERVAL '1 year' AS pickup_time,
  CAST (
    CASE
	  WHEN distance = 'null' THEN NULL
	  WHEN distance LIKE '%km' THEN TRIM(distance, 'km') ELSE distance
    END AS FLOAT),
  CAST(
	CASE
	  WHEN duration = 'null' THEN NULL
	  WHEN duration LIKE '%mins' THEN TRIM(duration, 'mins')
	  WHEN duration LIKE '%minute' THEN TRIM(duration, 'minute')
	  WHEN duration LIKE '%minutes' THEN TRIM(duration, 'minutes') ELSE duration
    END AS FLOAT),
  CASE WHEN cancellation = 'null' or cancellation = '' THEN NULL ELSE cancellation END
FROM pizza_runner.runner_orders;


How many pizzas were ordered?

SELECT COUNT(order_id) as TotalPizzasOrdered
FROM tmp_customer_orders;

How many unique customer orders were made?

SELECT COUNT(DISTINCT order_id) AS uniqueorders
FROM tmp_customer_orders;

How many successful orders were delivered by each runner?

SELECT ro.runner_id, COUNT(DISTINCT ro.order_id) AS successful_orders
FROM tmp_customer_orders co
INNER JOIN tmp_runner_orders ro
ON co.order_id = ro.order_id AND ro.distance IS NOT NULL
GROUP BY ro.runner_id;

How many of each type of pizza was delivered?

SELECT pn.pizza_name, COUNT(*) AS total_delivered
FROM tmp_customer_orders co
JOIN tmp_runner_orders ro
ON co.order_id = ro.order_id AND ro.duration IS NOT NULL
JOIN pizza_runner.pizza_names pn
ON co.pizza_id = pn.pizza_id
GROUP BY pn.pizza_name

How many Vegetarian and Meatlovers were ordered by each customer?

SELECT co.customer_id, pn.pizza_name, COUNT(*) AS type_ordered
FROM tmp_customer_orders co
JOIN pizza_runner.pizza_names pn
ON co.pizza_id = pn.pizza_id
GROUP BY co.customer_id, pn.pizza_name
ORDER BY co.customer_id;

What was the maximum number of pizzas delivered in a single order?

WITH pizzas_delivered_by_order AS (
  SELECT
	co.order_id,
	COUNT(*) AS total_pizzas_delivered
  FROM tmp_customer_orders co
  INNER JOIN tmp_runner_orders ro
	ON co.order_id = ro.order_id AND ro.distance IS NOT NULL
  GROUP BY co.order_id
),
ranked_pizzas_delievered AS (
	SELECT *, RANK() OVER(ORDER BY total_pizzas_delivered DESC)
	FROM pizzas_delivered_by_order
)
SELECT
  order_id,
  total_pizzas_delivered
FROM ranked_pizzas_delievered
WHERE rank = 1;

For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

SELECT
  co.customer_id,
  SUM(
	  CASE
	  	WHEN co.exclusions IS NULL or co.extras IS NULL THEN 1 ELSE 0
	  END) AS toppings_changed,
  SUM(
	  CASE
	  	WHEN co.exclusions IS NULL AND co.extras IS NULL THEN 1 ELSE 0
	  END) AS toppings_not_changed
FROM tmp_customer_orders co
INNER JOIN tmp_runner_orders ro
  ON co.order_id = ro.order_id AND ro.distance IS NOT NULL
GROUP BY co.customer_id
ORDER BY co.customer_id;

How many pizzas were delivered that had both exclusions and extras?

SELECT COUNT(*) AS pizza_with_exclusions_and_extras
FROM tmp_customer_orders co
INNER JOIN tmp_runner_orders ro
  ON co.order_id = ro.order_id AND ro.distance IS NOT NULL
WHERE co.exclusions IS NOT NULL
  AND co.extras IS NOT NULL;

What was the total volume of pizzas ordered for each hour of the day?

SELECT
  EXTRACT(HOUR FROM order_time) AS order_hour,
  COUNT(*) AS total_orders
FROM tmp_customer_orders
GROUP BY EXTRACT(HOUR FROM order_time)
ORDER BY total_orders DESC;

What was the volume of orders for each day of the week?

SELECT
  TO_CHAR(order_time, 'DAY') AS order_day,
  COUNT(*) AS total_orders
FROM tmp_customer_orders
GROUP BY TO_CHAR(order_time, 'DAY')
ORDER BY total_orders DESC;
